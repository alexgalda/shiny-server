file.monitor.1hr   <- paste0(dir, backend.name, "/", backend.name, "_1hr.csv")
if (!dir.exists(dirname(file.monitor.1hr))) {
dir.create(dirname(file.monitor.1hr))
}
file.monitor.24hr  <- paste0(dir, backend.name, "/", backend.name, "_24hr.csv")
if (!dir.exists(dirname(file.monitor.24hr))) {
dir.create(dirname(file.monitor.24hr))
}
# 10min ---
pending.jobs     <- pending_jobs(backend)
pending.jobs
if(!file.exists(file.monitor.10min)) {
device.info.10min <- data.frame(timestamp = character(0),       #1
pending_jobs = numeric(0),      #2
stringsAsFactors = FALSE)
write.csv(device.info.10min, file = file.monitor.10min, row.names = FALSE, quote = FALSE)
}
device.info.10min <- read.csv(file.monitor.10min, skip = 0, header = TRUE, stringsAsFactors = FALSE)
if (length(device.info.10min$timestamp) == 0) {
device.info.10min[1,] <- c(timestamp,        #1
pending.jobs)     #2
} else {
device.info.10min <- rbind(device.info.10min, c(timestamp,      #1
pending.jobs))  #2
}
device.info.10min
# 1hr ---
operational      <- is_operational(backend)
operational
if(!file.exists(file.monitor.1hr)) {
device.info.1hr <- data.frame(timestamp = character(0),         #1
operational = character(0),       #2
stringsAsFactors = FALSE)
write.csv(device.info.1hr, file = file.monitor.1hr, row.names = FALSE, quote = FALSE)
}
device.info.1hr <- read.csv(file.monitor.1hr, skip = 0, header = TRUE, stringsAsFactors = FALSE)
if (length(device.info.1hr$timestamp) == 0) {
device.info.1hr[1,] <- c(timestamp,          #1
operational)        #2
} else {
device.info.1hr <- rbind(device.info.1hr, c(timestamp,          #1
operational))       #2
}
device.info.1hr
# 24hr ---
n_qubits      <- number_qubits(backend)
backend.config   <- backend_config(backend)
backend.config
#backend.config   <- backend_config(backend)
backend.defaults <- backend_defaults(backend)
backend.defaults
reticulate::source_python(paste0(dir, "backend_overview.py"))
backend.name     <- "ibmq_armonk"
provider         <- get_provider()
backend          <- get_backend(provider, backend.name)
backend_monitor(backend)
get_unique_backends()
for (backend.name in get_unique_backends()) {
backend.name     <- "ibmq_armonk"
provider         <- get_provider()
backend          <- get_backend(provider, backend.name)
#backend.config   <- backend_config(backend)
#backend.defaults <- backend_defaults(backend)
time.now  <- Sys.time()
attributes(time.now)$tzone <- "UTC"
timestamp <- as.character(time.now)
print(backend.name)
}
for (backend.name in get_unique_backends()) {
provider         <- get_provider()
backend          <- get_backend(provider, backend.name)
#backend.config   <- backend_config(backend)
#backend.defaults <- backend_defaults(backend)
time.now  <- Sys.time()
attributes(time.now)$tzone <- "UTC"
timestamp <- as.character(time.now)
print(backend.name)
}
get_unique_backends()
get_unique_backends()[[1]]
for (backend.name in get_unique_backends()) {
provider         <- get_provider()
backend          <- get_backend(provider, backend.name)
#backend.config   <- backend_config(backend)
#backend.defaults <- backend_defaults(backend)
time.now  <- Sys.time()
attributes(time.now)$tzone <- "UTC"
timestamp <- as.character(time.now)
print(paste0(backend.name))
}
#for (backend.name in get_unique_backends()) {
backend.name <- get_unique_backends()[[1]]
backend.name
provider         <- get_provider()
backend          <- get_backend(provider, backend.name)
#for (backend.name in get_unique_backends()) {
backend.name <- as.character(get_unique_backends()[[1]])
provider         <- get_provider()
backend          <- get_backend(provider, backend.name)
for (backend.name in as.character(get_unique_backends())) {
for (backend.name in as.character(get_unique_backends()) {
for (backend.name in as.character(get_unique_backends()) {
as.character(get_unique_backends())
typeof(get_unique_backends())
typeof(get_unique_backends()[[1]])
library(envnames)
install.packages('envnames')
environment_name(get_unique_backends()[[1]])
library(envnames)
environment_name(get_unique_backends()[[1]])
typeof(get_unique_backends()[[1]])
get_unique_backends()[[1]]
as.character(get_unique_backends()[[1]])
for (backend.name in get_unique_backends()) {
backend.name <- as.character(backend.name)
provider         <- get_provider()
backend          <- get_backend(provider, backend.name)
#backend.config   <- backend_config(backend)
#backend.defaults <- backend_defaults(backend)
time.now  <- Sys.time()
attributes(time.now)$tzone <- "UTC"
timestamp <- as.character(time.now)
print(paste0(backend.name))
}
source('C:/Users/agalda/Google Drive/quantumgate.xyz/shiny-server/ibmq/monitor_10min.r', echo=TRUE)
meas_freq_est    <- backend_meas_freq_est(backend_defaults)[[1]]
rm(list = setdiff(ls(), lsf.str()))
options(shiny.sanitize.errors = FALSE)
if (dir.exists("/opt/anaconda/")) {
reticulate::use_python("/opt/anaconda/bin/python", required = TRUE)
reticulate::py_config()
dir <- "/srv/shiny-server/ibmq/"
} else {
reticulate::use_python("C:\\ProgramData\\Anaconda3\\python.exe", required = TRUE)
reticulate::py_config()
dir <- "C:\\Users\\agalda\\Google Drive\\quantumgate.xyz\\shiny-server\\ibmq\\"
}
reticulate::source_python(paste0(dir, "qiskit_monitor.py"))
reticulate::source_python(paste0(dir, "backend_overview.py"))
# 1hr ---
pending.jobs     <- backend_pending_jobs(backend)
backend.name <- as.character(get_unique_backends()[[1]])
provider     <- get_provider()
backend      <- get_backend(provider, backend.name)
time.now     <- Sys.time()
attributes(time.now)$tzone <- "UTC"
timestamp    <- as.character(time.now)
# 1hr ---
pending.jobs     <- backend_pending_jobs(backend)
pending.jobs
operational
reticulate::source_python(paste0(dir, "qiskit_monitor.py"))
reticulate::source_python(paste0(dir, "backend_overview.py"))
backend_operational(backend)
operational      <- backend_operational(backend)
operational
status_msg       <- backend_status_msg(backend)
status_msg
last_update_date <- backend_last_update_date(backend)
last_update_date
as.Date(last_update_date)
time.now     <- Sys.time()
attributes(time.now)$tzone <- "UTC"
as.typeof(time.now)
typeof(time.now)
typeof(last_update_date)
attributes(last_update_date)$tzone <- "UTC"
last_update_date
last_update_date <- backend_last_update_date(backend)
last_update_date
attributes(last_update_date)$tzone <- "UTC"
last_update_date <- as.character(last_update_date)
last_update_date
meas_freq_est    <- backend_meas_freq_est(backend_defaults)[[1]]
meas_freq_est
meas_freq_est    <- backend_meas_freq_est(backend_defaults)[[1]]
meas_freq_est
meas_freq_est    <- backend_meas_freq_est(backend_defaults)[[1]]
backend_meas_freq_est(backend_defaults)
meas_freq_est    <- backend_meas_freq_est(backend)[[1]]
backend
backend_meas_freq_est(backend)
reticulate::repl_python()
def backend_meas_freq_est(backend_defaults):     # 1hr CALIBRATION             [value]
return(backend_defaults.meas_freq_est)
quit
rm(list = setdiff(ls(), lsf.str()))
quit
options(shiny.sanitize.errors = FALSE)
if (dir.exists("/opt/anaconda/")) {
reticulate::use_python("/opt/anaconda/bin/python", required = TRUE)
reticulate::py_config()
dir <- "/srv/shiny-server/ibmq/"
} else {
reticulate::use_python("C:\\ProgramData\\Anaconda3\\python.exe", required = TRUE)
reticulate::py_config()
dir <- "C:\\Users\\agalda\\Google Drive\\quantumgate.xyz\\shiny-server\\ibmq\\"
}
reticulate::source_python(paste0(dir, "qiskit_monitor.py"))
reticulate::source_python(paste0(dir, "backend_overview.py"))
backend.name <- as.character(get_unique_backends()[[1]])
#backend.name <- as.character(get_unique_backends()[[1]])
backend.name <- as.character(backend.name)
provider     <- get_provider()
backend      <- get_backend(provider, backend.name)
time.now     <- Sys.time()
attributes(time.now)$tzone <- "UTC"
timestamp    <- as.character(time.now)
# 1hr ---
pending.jobs     <- backend_pending_jobs(backend)
pending.jobs
operational      <- backend_operational(backend)
operational
status_msg       <- backend_status_msg(backend)
status_msg
meas_freq_est    <- backend_meas_freq_est(backend)[[1]]
backend_meas_freq_est(backend)
backend
reticulate::source_python(paste0(dir, "qiskit_monitor.py"))
reticulate::source_python(paste0(dir, "backend_overview.py"))
meas_freq_est    <- backend_meas_freq_est(backend)[[1]]
rm(list = setdiff(ls(), lsf.str()))
options(shiny.sanitize.errors = FALSE)
if (dir.exists("/opt/anaconda/")) {
reticulate::use_python("/opt/anaconda/bin/python", required = TRUE)
reticulate::py_config()
dir <- "/srv/shiny-server/ibmq/"
} else {
reticulate::use_python("C:\\ProgramData\\Anaconda3\\python.exe", required = TRUE)
reticulate::py_config()
dir <- "C:\\Users\\agalda\\Google Drive\\quantumgate.xyz\\shiny-server\\ibmq\\"
}
reticulate::source_python(paste0(dir, "qiskit_monitor.py"))
reticulate::source_python(paste0(dir, "backend_overview.py"))
backend.name <- as.character(get_unique_backends()[[1]])
#backend.name <- as.character(get_unique_backends()[[1]])
backend.name <- as.character(backend.name)
backend.name
provider     <- get_provider()
backend      <- get_backend(provider, backend.name)
time.now     <- Sys.time()
attributes(time.now)$tzone <- "UTC"
timestamp    <- as.character(time.now)
# 1hr ---
pending.jobs     <- backend_pending_jobs(backend)
operational      <- backend_operational(backend)
status_msg       <- backend_status_msg(backend)
meas_freq_est    <- backend_meas_freq_est(backend)[[1]]
meas_freq_est    <- backend_meas_freq_est(backend)#[[1]]
qubit_freq_est   <- backend_qubit_freq_est(backend)[[1]]
last_update_date <- backend_last_update_date(backend)
last_update_date
backend_meas_freq_est(backend)
meas_freq_est    <- backend_meas_freq_est(backend_defaults(backend))#[[1]]
backend_defaults(backend)
reticulate::use_python("C:\\ProgramData\\Anaconda3\\python.exe", required = TRUE)
reticulate::py_config()
if (dir.exists("/opt/anaconda/")) {
reticulate::use_python("/opt/anaconda/bin/python", required = TRUE)
reticulate::py_config()
dir <- "/srv/shiny-server/ibmq/"
} else {
reticulate::use_python("C:\\ProgramData\\Anaconda3\\python.exe", required = TRUE)
reticulate::py_config()
dir <- "C:\\Users\\agalda\\Google Drive\\quantumgate.xyz\\shiny-server\\ibmq\\"
}
reticulate::source_python(paste0(dir, "qiskit_monitor.py"))
reticulate::source_python(paste0(dir, "backend_overview.py"))
meas_freq_est    <- backend_meas_freq_est(backend_defaults(backend))#[[1]]
backend_defaults(backend)
reticulate::source_python(paste0(dir, "qiskit_monitor.py"))
reticulate::source_python(paste0(dir, "backend_overview.py"))
meas_freq_est    <- backend_meas_freq_est(backend_defaults(backend))#[[1]]
qubit_freq_est   <- backend_qubit_freq_est(backend)[[1]]
qubit_freq_est
backend.defaults <- backend_defaults(backend)
reticulate::source_python(paste0(dir, "qiskit_monitor.py"))
reticulate::source_python(paste0(dir, "backend_overview.py"))
meas_freq_est    <- backend_meas_freq_est(backend.defaults)
meas_freq_est
qubit_freq_est   <- backend_qubit_freq_est(backend.defaults)
qubit_freq_est
last_update_date <- backend_last_update_date(backend)
last_update_date
reticulate::source_python(paste0(dir, "qiskit_monitor.py"))
reticulate::source_python(paste0(dir, "backend_overview.py"))
pulse_library    <- backend_pulse_library(backend.defaults)
pulse_library
reticulate::source_python(paste0(dir, "qiskit_monitor.py"))
reticulate::source_python(paste0(dir, "backend_overview.py"))
pulse_library    <- backend_pulse_library(backend.defaults)
pulse_library
reticulate::source_python(paste0(dir, "qiskit_monitor.py"))
reticulate::source_python(paste0(dir, "backend_overview.py"))
# 1hr ---
pending.jobs     <- backend_pending_jobs(backend)
operational      <- backend_operational(backend)
status_msg       <- backend_status_msg(backend)
meas_freq_est    <- backend_meas_freq_est(backend.defaults)[[1]]
meas_freq_est
meas_freq_est    <- backend_meas_freq_est(backend.defaults)#[[1]]
meas_freq_est    <- backend_meas_freq_est(backend.defaults)[[1]]
meas_freq_est    <- backend_meas_freq_est(backend.defaults)[1]
# 1hr ---
pending.jobs     <- backend_pending_jobs(backend)
operational      <- backend_operational(backend)
status_msg       <- backend_status_msg(backend)
meas_freq_est    <- backend_meas_freq_est(backend.defaults)[1]
qubit_freq_est   <- backend_qubit_freq_est(backend.defaults)[1]
qubit_freq_est
get_unique_backends()
backend.name <- as.character(get_unique_backends()[[8]])
provider     <- get_provider()
backend      <- get_backend(provider, backend.name)
backend.defaults <- backend_defaults(backend)
time.now     <- Sys.time()
attributes(time.now)$tzone <- "UTC"
timestamp    <- as.character(time.now)
reticulate::source_python(paste0(dir, "qiskit_monitor.py"))
reticulate::source_python(paste0(dir, "backend_overview.py"))
# 1hr ---
pending.jobs     <- backend_pending_jobs(backend)
operational      <- backend_operational(backend)
status_msg       <- backend_status_msg(backend)
meas_freq_est    <- backend_meas_freq_est(backend.defaults)
qubit_freq_est   <- backend_qubit_freq_est(backend.defaults)
operational      <- backend_operational(backend)
# 1hr ---
pending.jobs     <- backend_pending_jobs(backend)
pending.jobs
status_msg       <- backend_status_msg(backend)
meas_freq_est    <- backend_meas_freq_est(backend.defaults)
status_msg       <- backend_status_msg(backend)
status_msg
meas_freq_est    <- backend_meas_freq_est(backend.defaults)
meas_freq_est
backend.defaults
backend.defaults <- backend_defaults(backend)
time.now     <- Sys.time()
attributes(time.now)$tzone <- "UTC"
timestamp    <- as.character(time.now)
file.monitor.1hr <- paste0(dir, backend.name, "/", backend.name, "_1hr.csv")
if (!dir.exists(dirname(file.monitor.1hr))) {
dir.create(dirname(file.monitor.1hr))
}
# 1hr ---
pending.jobs     <- backend_pending_jobs(backend)
operational      <- backend_operational(backend)
status_msg       <- backend_status_msg(backend)
meas_freq_est    <- backend_meas_freq_est(backend.defaults)
backend.defaults
reticulate::source_python(paste0(dir, "qiskit_monitor.py"))
reticulate::source_python(paste0(dir, "backend_overview.py"))
# 1hr ---
pending.jobs     <- backend_pending_jobs(backend)
operational      <- backend_operational(backend)
status_msg       <- backend_status_msg(backend)
meas_freq_est    <- backend_meas_freq_est(backend)
backend
backend_meas_freq_est(backend)
reticulate::source_python(paste0(dir, "qiskit_monitor.py"))
reticulate::source_python(paste0(dir, "backend_overview.py"))
meas_freq_est    <- backend_meas_freq_est(backend)
reticulate::source_python(paste0(dir, "qiskit_monitor.py"))
reticulate::source_python(paste0(dir, "backend_overview.py"))
#backend.name <- as.character(get_unique_backends()[[8]])
backend.name <- as.character(backend.name)
provider     <- get_provider()
backend      <- get_backend(provider, backend.name)
#backend.defaults <- backend_defaults(backend)
time.now     <- Sys.time()
attributes(time.now)$tzone <- "UTC"
rm(list = setdiff(ls(), lsf.str()))
options(shiny.sanitize.errors = FALSE)
if (dir.exists("/opt/anaconda/")) {
reticulate::use_python("/opt/anaconda/bin/python", required = TRUE)
reticulate::py_config()
dir <- "/srv/shiny-server/ibmq/"
} else {
reticulate::use_python("C:\\ProgramData\\Anaconda3\\python.exe", required = TRUE)
reticulate::py_config()
dir <- "C:\\Users\\agalda\\Google Drive\\quantumgate.xyz\\shiny-server\\ibmq\\"
}
reticulate::source_python(paste0(dir, "qiskit_monitor.py"))
reticulate::source_python(paste0(dir, "backend_overview.py"))
backend.name <- as.character(get_unique_backends()[[8]])
#backend.name <- as.character(get_unique_backends()[[8]])
backend.name <- as.character(backend.name)
provider     <- get_provider()
backend      <- get_backend(provider, backend.name)
#backend.defaults <- backend_defaults(backend)
time.now     <- Sys.time()
attributes(time.now)$tzone <- "UTC"
timestamp    <- as.character(time.now)
file.monitor.1hr <- paste0(dir, backend.name, "/", backend.name, "_1hr.csv")
if (!dir.exists(dirname(file.monitor.1hr))) {
dir.create(dirname(file.monitor.1hr))
}
# 1hr ---
pending.jobs     <- backend_pending_jobs(backend)
operational      <- backend_operational(backend)
status_msg       <- backend_status_msg(backend)
meas_freq_est    <- backend_meas_freq_est(backend)
meas_freq_est
reticulate::source_python(paste0(dir, "qiskit_monitor.py"))
reticulate::source_python(paste0(dir, "backend_overview.py"))
# 1hr ---
pending.jobs     <- backend_pending_jobs(backend)
operational      <- backend_operational(backend)
status_msg       <- backend_status_msg(backend)
meas_freq_est    <- backend_meas_freq_est(backend)
qubit_freq_est   <- backend_qubit_freq_est(backend)
last_update_date <- backend_last_update_date(backend)
attributes(last_update_date)$tzone <- "UTC"
last_update_date <- as.character(last_update_date)
qubit_freq_est
pulse_library
pulse_library    <- backend_pulse_library(backend.defaults)
pulse_library    <- backend_pulse_library(backend)
pulse_library
file.pulse_library <- paste0(dir, backend.name, "/pulse_library/", backend.name, "_", timestamp, ".txt")
file.pulse_library
gsub(":", "_", "12:23")
file.pulse_library <- paste0(dir, backend.name, "/pulse_library/", backend.name, "_", gsub(":", "_", timestamp), ".txt")
file.pulse_library
file.monitor.1hr   <- paste0(dir, backend.name, "/", backend.name, "_1hr.csv")
file.pulse_library <- paste0(dir, backend.name, "/pulse_library/", backend.name, "_", gsub(":", "_", timestamp), ".txt")
if (!dir.exists(dirname(file.monitor.1hr))) {
dir.create(dirname(file.monitor.1hr))
}
if (!dir.exists(dirname(file.pulse_library))) {
dir.create(dirname(file.pulse_library))
}
# 1hr ---
pending.jobs     <- backend_pending_jobs(backend)
operational      <- backend_operational(backend)
status_msg       <- backend_status_msg(backend)
meas_freq_est    <- backend_meas_freq_est(backend)
qubit_freq_est   <- backend_qubit_freq_est(backend)
last_update_date <- backend_last_update_date(backend)
attributes(last_update_date)$tzone <- "UTC"
last_update_date <- as.character(last_update_date)
pulse_library    <- backend_pulse_library(backend)
write.csv(pulse_library, file = file.pulse_library)
pulse_library    <- as.character(backend_pulse_library(backend))
write.csv(pulse_library, file = file.pulse_library)
rm(list = setdiff(ls(), lsf.str()))
options(shiny.sanitize.errors = FALSE)
if (dir.exists("/opt/anaconda/")) {
reticulate::use_python("/opt/anaconda/bin/python", required = TRUE)
reticulate::py_config()
dir <- "/srv/shiny-server/ibmq/"
} else {
reticulate::use_python("C:\\ProgramData\\Anaconda3\\python.exe", required = TRUE)
reticulate::py_config()
dir <- "C:\\Users\\agalda\\Google Drive\\quantumgate.xyz\\shiny-server\\ibmq\\"
}
reticulate::source_python(paste0(dir, "qiskit_monitor.py"))
reticulate::source_python(paste0(dir, "backend_overview.py"))
get_unique_backends()
backends.available
reticulate::source_python(paste0(dir, "python_functions.py"))
backends.available <- get_unique_backends()
reticulate::source_python(paste0(dir, "python_functions.py"))
reticulate::source_python(paste0(dir, "python_functions.py"))
backends.available <- get_unique_backends()
if (dir.exists("/opt/anaconda/")) {
reticulate::use_python("/opt/anaconda/bin/python", required = TRUE)
reticulate::py_config()
dir <- "/srv/shiny-server/ibmq/"
} else {
reticulate::use_python("C:\\ProgramData\\Anaconda3\\python.exe", required = TRUE)
reticulate::py_config()
dir <- "C:\\Users\\agalda\\Google Drive\\quantumgate.xyz\\shiny-server\\ibmq\\"
}
reticulate::source_python(paste0(dir, "python_functions.py"))
backends.available <- get_unique_backends()
backends.available
source('C:/Users/agalda/Google Drive/quantumgate.xyz/shiny-server/ibmq/monitor_1hr.r', echo=TRUE)
source('C:/Users/agalda/Google Drive/quantumgate.xyz/shiny-server/ibmq/monitor_1hr.r', echo=TRUE)
shiny::runApp('C:/Users/agalda/Google Drive/quantumgate.xyz/shiny-server/ibmq')
reticulate::source_python(paste0(dir, "ibmq_functions.py"))
backends.available <- get_unique_backends()
reticulate::source_python(paste0(dir, "ibmq_functions.py"))
backends.available <- get_unique_backends()
rm(list = setdiff(ls(), lsf.str()))
options(shiny.sanitize.errors = FALSE)
library(htmltools)
library(htmlwidgets)
library(shiny)
library(shinyalert)
library(shinyBS)
library(shinyjs)
library(shinyWidgets)
library(highcharter)
if (dir.exists("/opt/anaconda/")) {
reticulate::use_python("/opt/anaconda/bin/python", required = TRUE)
reticulate::py_config()
dir <- "/srv/shiny-server/ibmq/"
} else {
reticulate::use_python("C:\\ProgramData\\Anaconda3\\python.exe", required = TRUE)
reticulate::py_config()
dir <- "C:\\Users\\agalda\\Google Drive\\quantumgate.xyz\\shiny-server\\ibmq\\"
}
source(paste0(dir, "func/highstock.r"))
token.UC <- 'e7b72db6919022a00d9a75557392311954b58280de131c451c9939ccb701b69a6d0d63e3fb912f086723d8cdcaf45c7f710d4c3ab1930c4df1a13768ad476202'
reticulate::source_python(paste0(dir, "ibmq_functions.py"))
backends.available <- get_unique_backends()
reticulate::source_python(paste0(dir, "func/ibmq_functions.py"))
reticulate::source_python(paste0(dir, "ibmq_functions.py"))
shiny::runApp('C:/Users/agalda/Google Drive/quantumgate.xyz/shiny-server/ibmq')
runApp('C:/Users/agalda/Google Drive/quantumgate.xyz/shiny-server/ibmq')
